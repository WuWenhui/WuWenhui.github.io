{"meta":{"title":"Wenki's Blog","subtitle":"享受生活 善待自己","description":null,"author":"Wenki","url":"https://www.wenkiwu.com"},"pages":[],"posts":[{"title":"Google Protocol Buffer使用","slug":"how-to-using-protobuf","date":"2018-02-04T05:50:27.000Z","updated":"2018-04-02T13:58:19.551Z","comments":true,"path":"2018/02/04/how-to-using-protobuf/","link":"","permalink":"https://www.wenkiwu.com/2018/02/04/how-to-using-protobuf/","excerpt":"protobuf是一个灵活高效的序列化数据结构的方案，类似XML，但是更小更快更简单。它包含一种用于描述数据结构的接口描述语言和一个用于生成不同编程语言的源代码生成器。通常用于数据交换和数据存储。相比JSON和XML，protobuf拥有以下优点： 数据小：序列化后，数据小3-10倍 速度快：序列化速度快20-100倍 使用简单：proto编译器自动生成数据访问类 加密性：存储和传输的是字节 兼容性好： 不必破坏旧数据格式就可以实现数据结构的更新","text":"protobuf是一个灵活高效的序列化数据结构的方案，类似XML，但是更小更快更简单。它包含一种用于描述数据结构的接口描述语言和一个用于生成不同编程语言的源代码生成器。通常用于数据交换和数据存储。相比JSON和XML，protobuf拥有以下优点： 数据小：序列化后，数据小3-10倍 速度快：序列化速度快20-100倍 使用简单：proto编译器自动生成数据访问类 加密性：存储和传输的是字节 兼容性好： 不必破坏旧数据格式就可以实现数据结构的更新 定义协议格式创建.proto文件，为每个需要序列化的数据结构添加一个message，在每个message中为每一个字段指定名称和类型1234567891011121314151617181920212223242526272829syntax = &quot;proto2&quot;;package tutorial;option java_package = &quot;com.example.tutorial&quot;;option java_outer_classname = &quot;AddressBookProtos&quot;;message Person &#123; required string name = 1; required int32 id = 2; optional string email = 3; enum PhoneType &#123; MOBILE = 0; HOME = 1; WORK = 2; &#125; message PhoneNumber &#123; required string number = 1; optional PhoneType type = 2 [default = HOME]; &#125; repeated PhoneNumber phones = 4;&#125;message AddressBook &#123; repeated Person people = 1;&#125; 生成源文件使用 protobuf 编译器生成java类1protoc -I=$SRC_DIR --java_out=$DST_DIR $SRC_DIR/file.proto Android Studio使用gradle插件(https://github.com/google/protobuf-gradle-plugin)自动编译.proto文件 创建实例为了构造一个message，你必须首先构造一个构建器，将你想要设置的字段设置为你选择的值，然后调用构建器的build()方法。12345678Person john = Person.newBuilder() .setId(1234) .setName(\"John Doe\") .setEmail(\"jdoe@example.com\") .addPhones(Person.PhoneNumber.newBuilder() .setNumber(\"555-4321\") .setType(Person.PhoneType.HOME)) .build(); 序列化和反序列化 byte[] toByteArray();: 将`message序列化为byte数组 static Person parseFrom(byte[] data);: 从byte数组中解析出message void writeTo(OutputStream output);： 将message序列化到给定的OutputStream中 static Person parseFrom(InputStream input);: 从InputStream中读取并解析成message 更多用法参见官方文档","categories":[{"name":"Android","slug":"Android","permalink":"https://www.wenkiwu.com/categories/Android/"}],"tags":[{"name":"protobuf","slug":"protobuf","permalink":"https://www.wenkiwu.com/tags/protobuf/"},{"name":"Protocol Buffer","slug":"Protocol-Buffer","permalink":"https://www.wenkiwu.com/tags/Protocol-Buffer/"}]},{"title":"Android 5.0以上使用MediaProjection跨应用截屏","slug":"cross-application-screenshot-on-Android 5.0+","date":"2018-01-28T03:59:15.000Z","updated":"2018-04-02T13:57:43.761Z","comments":true,"path":"2018/01/28/cross-application-screenshot-on-Android 5.0+/","link":"","permalink":"https://www.wenkiwu.com/2018/01/28/cross-application-screenshot-on-Android 5.0+/","excerpt":"获取 MediaProjectionManager1mediaProjectionManager = (MediaProjectionManager) getSystemService(Context.MEDIA_PROJECTION_SERVICE); 启动屏幕捕获向用户请求屏幕捕获1startActivityForResult(mediaProjectionManager.createScreenCaptureIntent(), REQUEST_CAPTURE); 获取请求结果12345678@Overrideprotected void onActivityResult(int requestCode, int resultCode, Intent data) &#123; super.onActivityResult(requestCode, resultCode, data); if (requestCode == REQUEST_CAPTURE) &#123; //申请权限返回结果 mediaProjection = mediaProjectionManager.getMediaProjection(resultCode, data); //... &#125;&#125;","text":"获取 MediaProjectionManager1mediaProjectionManager = (MediaProjectionManager) getSystemService(Context.MEDIA_PROJECTION_SERVICE); 启动屏幕捕获向用户请求屏幕捕获1startActivityForResult(mediaProjectionManager.createScreenCaptureIntent(), REQUEST_CAPTURE); 获取请求结果12345678@Overrideprotected void onActivityResult(int requestCode, int resultCode, Intent data) &#123; super.onActivityResult(requestCode, resultCode, data); if (requestCode == REQUEST_CAPTURE) &#123; //申请权限返回结果 mediaProjection = mediaProjectionManager.getMediaProjection(resultCode, data); //... &#125;&#125; 获取屏幕内容123456final ImageReader imageReader = ImageReader.newInstance(application.getWidth(), application.getHeight(), PixelFormat.RGBA_8888, 1);virtualDisplay = mediaProjection.createVirtualDisplay(\"capture\", application.getWidth(), application.getHeight(), application.getDpi(), DisplayManager.VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR, imageReader.getSurface(), null, null); 读取屏幕内容1234567891011121314151617Image image = imageReader.acquireLatestImage();if (image == null) &#123; Log.e(TAG, \"imageReader.acquireLatestImage() is null\");&#125; else &#123; Image.Plane plane = image.getPlanes()[0]; int width = image.getWidth(); int height = image.getHeight(); ByteBuffer byteBuffer = plane.getBuffer(); int rowStride = plane.getRowStride(); int pixelStride = plane.getPixelStride(); int rowPadding = rowStride - pixelStride * width; Bitmap bitmap = Bitmap.createBitmap(width + rowPadding / pixelStride, height, Bitmap.Config.ARGB_8888); bitmap.copyPixelsFromBuffer(byteBuffer); bitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height); imageReader.close();&#125; 主要类源代码Application完整代码123456789101112131415161718192021222324252627282930313233343536public class MyApplication extends Application &#123; private MediaProjectionManager mediaProjectionManager; private int width, height, dpi; @Override public void onCreate() &#123; super.onCreate(); this.mediaProjectionManager = (MediaProjectionManager) getSystemServic(Context.MEDIA_PROJECTION_SERVICE); WindowManager manager = (WindowManager) getSystemService(WINDOW_SERVICE); Display display = manager.getDefaultDisplay(); DisplayMetrics displayMetrics = new DisplayMetrics(); display.getMetrics(displayMetrics); width = displayMetrics.widthPixels; height = displayMetrics.heightPixels; dpi = displayMetrics.densityDpi; &#125; public MediaProjectionManager getMediaProjectionManager() &#123; return mediaProjectionManager; &#125; public int getWidth() &#123; return width; &#125; public int getHeight() &#123; return height; &#125; public int getDpi() &#123; return dpi; &#125;&#125; MainActivity完整代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980public class MainActivity extends AppCompatActivity &#123; public static final String TAG = MainActivity.class.getSimpleName(); public static final int REQUEST_CAPTURE = 1001; MyApplication application = null; Handler mHandler = new Handler(); ImageView imageView = null; MediaProjectionManager mediaProjectionManager = null; MediaProjection mediaProjection = null; VirtualDisplay virtualDisplay = null; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); application = (MyApplication) getApplication(); imageView = findViewById(R.id.imageView); //申请录屏权限 mediaProjectionManager = application.getMediaProjectionManager(); startActivityForResult(mediaProjectionManager.createScreenCaptureIntent(), REQUEST_CAPTURE); &#125; @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) &#123; super.onActivityResult(requestCode, resultCode, data); if (requestCode == REQUEST_CAPTURE) &#123; //申请录屏权限返回结果 mediaProjection = mediaProjectionManager.getMediaProjection(resultCode, data); if(mediaProjection != null) &#123; saveCapture(); &#125;else&#123; Log.e(TAG, \"acquire ScreenCapture fail\"); &#125; &#125; &#125; private void saveCapture() &#123; final ImageReader imageReader = ImageReader.newInstance(application.getWidth(), application.getHeight(), PixelFormat.RGBA_8888, 1); virtualDisplay = mediaProjection.createVirtualDisplay(\"capture\", application.getWidth(), application.getHeight(), application.getDpi(), DisplayManager.VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR, imageReader.getSurface(), null, null); mHandler.postDelayed(new Runnable() &#123; @Override public void run() &#123; Image image = imageReader.acquireLatestImage(); if (image == null) &#123; Log.e(TAG, \"imageReader.acquireLatestImage() is null\"); &#125; else &#123; Image.Plane plane = image.getPlanes()[0]; int width = image.getWidth(); int height = image.getHeight(); ByteBuffer byteBuffer = plane.getBuffer(); int rowStride = plane.getRowStride(); int pixelStride = plane.getPixelStride(); int rowPadding = rowStride - pixelStride * width; Bitmap bitmap = Bitmap.createBitmap(width + rowPadding / pixelStride, height, Bitmap.Config.ARGB_8888); bitmap.copyPixelsFromBuffer(byteBuffer); bitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height); imageReader.close(); //可将bitmap保存到本地 imageView.setImageBitmap(bitmap); &#125; &#125; &#125;, 500); &#125; @Override protected void onDestroy() &#123; super.onDestroy(); virtualDisplay.release(); mediaProjection.stop(); &#125;&#125;","categories":[{"name":"Android","slug":"Android","permalink":"https://www.wenkiwu.com/categories/Android/"}],"tags":[{"name":"截屏","slug":"截屏","permalink":"https://www.wenkiwu.com/tags/截屏/"}]},{"title":"使用GitHub Pages部署个人网站","slug":"using-GithubPages-deploy-personal-site","date":"2018-01-20T09:20:32.000Z","updated":"2018-04-02T14:00:13.705Z","comments":true,"path":"2018/01/20/using-GithubPages-deploy-personal-site/","link":"","permalink":"https://www.wenkiwu.com/2018/01/20/using-GithubPages-deploy-personal-site/","excerpt":"GitHub Pages前往GitHub官网，登录或注册账号新建仓库，仓库名为yourname.github.io。其中yourname填写你的GitHub账户名，创建成功后，GitHub会自动为你开启Github pages Hexo部署使用Hexo建站完成并测试后，即可发布到github。","text":"GitHub Pages前往GitHub官网，登录或注册账号新建仓库，仓库名为yourname.github.io。其中yourname填写你的GitHub账户名，创建成功后，GitHub会自动为你开启Github pages Hexo部署使用Hexo建站完成并测试后，即可发布到github。 修改_config_yml文件12345deploy: type: git repo: https://github.com/yourname/yourname.github.io.git branch: master message: commit message 参数 描述 repo GitHub仓库URL branch 提交到哪个分支(可选) message 自定义提交信息(可选) 安装hexo-deployer-git模块1&gt; npm install hexo-deployer-git --save 部署12&gt; hexo generate&gt; hexo deploy 也可简写成hexo g -d或hexo d -g 部署完成后，即可访问 https://yourname.github.io/ 查看你的个人网站了 自定义域名GitHub Pages允许为网站绑定自己的域名，替代 yourname.github.io 作为网站的访问地址。 在Hexo网站项目的source目录下新建文件CNAME，写入你的域名，如:1www.wenkiwu.com 修改完成后部署 前往域名注册商添加解析记录 主机记录 记录类型 记录值 www CNAME yourname.github.io @ CNAME yourname.github.io 设置完成后等待生效 将网站源文件使用git管理在github上创建仓库 进入网站项目根目录，执行下面命令12345&gt; git init&gt; git remote add origin [repository url]&gt; git add .&gt; git commit -m &apos;message&apos;&gt; git push --set-upstream origin master 在其它电脑上就可获取项目源文件修改并部署1$ git clone [repository url] 进入项目根目录，此电脑已有nodejs并安装hexo的情况下12$ npm install$ npm install hexo-deployer-git --save 新建文件或者修改项目，测试后部署1$ hexo d -g 将更改提交到远程仓库1$ git push origin master","categories":[{"name":"建站","slug":"建站","permalink":"https://www.wenkiwu.com/categories/建站/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://www.wenkiwu.com/tags/hexo/"},{"name":"GitHub Pages","slug":"GitHub-Pages","permalink":"https://www.wenkiwu.com/tags/GitHub-Pages/"}]},{"title":"Hexo搭建个人网站","slug":"using-hexo-build-personal-site","date":"2018-01-20T07:16:55.000Z","updated":"2018-04-02T14:02:02.157Z","comments":true,"path":"2018/01/20/using-hexo-build-personal-site/","link":"","permalink":"https://www.wenkiwu.com/2018/01/20/using-hexo-build-personal-site/","excerpt":"nodejs和npm安装前往Node.js下载页下载最新的LTS版本。 按步骤安装Node.js，注意选择安装 npm package manager 和 Ad to PATH。 使用 npm -v 测试是否已成功安装","text":"nodejs和npm安装前往Node.js下载页下载最新的LTS版本。 按步骤安装Node.js，注意选择安装 npm package manager 和 Ad to PATH。 使用 npm -v 测试是否已成功安装 Hexo安装使用npm安装Hexo1&gt; npm install -g hexo-cli 如果觉得安装模块太慢，可设置淘宝NPM镜像1&gt; npm config set registry https://registry.npm.taobao.org 建站初始化目录安装完成后，前往项目文件夹执行命令123&gt; cd D:\\HexoPages&gt; hexo init&gt; npm install 完成后，文件夹目录大致有 scaffolds 模板文件夹。新建文章时，Hexo会根据此文件夹中的文件，在新建的markdown文件中默认填充内容 source 资源文件夹。存放用户资源的地方 themes 主题文件夹。Hexo会根据主题来生成静态页面 .gitignore Git版本控制配置文件 _config.yml 网站配置文件 package.json 应用程序配置信息 新建文件hexo new [layout] &lt;title&gt; 命令用于使用指定布局新建文章，layout 用于指定文章的布局，默认是post。Hexo 会根据 scaffolds 文件夹内相对应的文件来建立文件1&gt; hexo new hello Hexo 默认以标题作为文件的名称，也可通过 _config.yml 的 new_post_name 参数来修改默认的文件名称 生成静态文件1&gt; hexo generate 启动服务器安装hexo-server1&gt; npm install hexo-server --save 安装完成后启动服务器，默认使用4000端口，使用-p指定端口1&gt; hexo server -p 4001","categories":[{"name":"建站","slug":"建站","permalink":"https://www.wenkiwu.com/categories/建站/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://www.wenkiwu.com/tags/hexo/"}]}]}